from config import TOKEN
import logging
from aiogram import Bot, Dispatcher, executor, types
from sqlighter import SQLighter

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

btnAppointment = types.KeyboardButton('üìÖ–ó–∞–ø–∏—Å–∞—Ç—å—Å—è')
btnCancelAppointment = types.KeyboardButton('üò•–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å')
btnFAQ = types.KeyboardButton('‚úç–û—Å—Ç–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å')
btnAdress = types.KeyboardButton('üè¢–ù–∞–ø–æ–º–Ω–∏—Ç—å –∞–¥—Ä–µ—Å')
btnsData = types.ReplyKeyboardMarkup()
btnsData.add(btnAppointment, btnCancelAppointment, btnFAQ, btnAdress)

findDateVizit = '17'
btnsDates = types.ReplyKeyboardMarkup()
btnsDates.add(findDateVizit, '12', '29', '1')

@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("‚úã–ü—Ä–∏–≤–µ—Ç!\n–Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–æ–∫—Ç–æ—Ä–∞ üë®‚Äç‚öïÔ∏è –ò–∑–º–∞–π–ª–æ–≤–∞!", reply_markup=btnsData)
       
@dp.message_handler()
async def echo(message: types.Message): 
    if message.text == 'üìÖ–ó–∞–ø–∏—Å–∞—Ç—å—Å—è':
        await message.reply("–û–∫ —è –ø—Ä–æ–≤–µ—Ä—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –≤–∏–∑–∏—Ç–∞ –¥–∞—Ç—ã")
       # await message.reply("–£–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π", reply_markup=btnsData.ReplyKeyboardRemove())
    await message.reply("–ò—Ç–∞–∫, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É", reply_markup=btnsDates)


@dp.message_handler(commands=['rm'])
async def process_rm_command(message: types.Message):
    if message.text == 'üìÖ–ó–∞–ø–∏—Å–∞—Ç—å—Å—è':
        print(message.text == 'üìÖ–ó–∞–ø–∏—Å–∞—Ç—å—Å—è')
        await message.reply("–£–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π", reply_markup=btnsData.ReplyKeyboardRemove())

# @dp.message_handler(commands=[btnAppointment])
# async def process_btnAppointment_command(message: types.Message):
#     await message.reply("–û–∫, —è –ø–æ—Å–º–æ—Ç—Ä—é —Å–≤–æ–±–æ–¥–Ω—É—é –∑–∞–ø–∏—Å—å!")


# @dp.callback_query_handler(func=lambda c: c.data and c.data.startswith('btnAppointment'))
# async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
#     code = callback_query.data[-1]
#     print(code)
#     if code.isdigit():
#         code = int(code)
#     if code == 2:
#         await bot.answer_callback_query(callback_query.id, text='–ù–∞–∂–∞—Ç–∞ –≤—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞')
#     elif code == 5:
#         await bot.answer_callback_query(
#             callback_query.id,
#             text='–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º 5.\n–ê —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤ üòâ', show_alert=True)
#     else:
#         await bot.answer_callback_query(callback_query.id)
#     await bot.send_message(callback_query.from_user.id, f'–ù–∞–∂–∞—Ç–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞! code={code}')


# @dp.message_handler()
# async def echo(message: types.Message): 
#     markup = types.InlineKeyboardMarkup()
#     markup.add(types.InlineKeyboardButton("–î–∞"))
#     if message.text == '–¥–∞':
#         await message.reply("–û–∫ —è –ø—Ä–æ–≤–µ—Ä—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –≤–∏–∑–∏—Ç–∞ –¥–∞—Ç—ã")


#@dp.message_handler(commands=['keyboard'])
# async def open_keyboard(message: types.Message): 
#     markup = types.InlineKeyboardMarkup()
#     markup.add(types.InlineKeyboardButton("–î–∞"))
#     btn1 = types.KeyboardButton('–ú–∞—Å—Å–∞–∂')
#     btn2 = types.KeyboardButton('–í—Å—Ç–µ—Ä—á–∞')
#     btn3 = types.KeyboardButton('–î—Ä—É–≥–æ–µ')
#     btn4 = types.KeyboardButton('–ó–∞–ø–∏—Å—å')
#     markup.add(btn1, btn2, btn3, btn4)
#     await message.reply(message.chat.id, "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä")
#     # if message.text == '–¥–∞':
#     #     await message.reply("–û–∫ —è –ø—Ä–æ–≤–µ—Ä—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –≤–∏–∑–∏—Ç–∞ –¥–∞—Ç—ã")

# @dp.message_handler(commands=['subscribe'])
# async def subscribe(message: types.Message):
#     if(not db.subscriber_exists(message.from_user.id)):
#         db.add_subscriber(message.from_user.id)
#     else: 
#         db.update_subscription(message.from_user.id, True)
    
#     await message.answer("–í—ã —É—Å–ø–µ—à–ª–æ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–ø–∏—Å—å!")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
